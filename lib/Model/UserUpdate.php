<?php
/**
 * UserUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mailu API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'raw_password' => 'string',
        'comment' => 'string',
        'quota_bytes' => 'int',
        'global_admin' => 'bool',
        'enabled' => 'bool',
        'enable_imap' => 'bool',
        'enable_pop' => 'bool',
        'allow_spoofing' => 'bool',
        'forward_enabled' => 'bool',
        'forward_destination' => 'string[]',
        'forward_keep' => 'bool',
        'reply_enabled' => 'bool',
        'reply_subject' => 'string',
        'reply_body' => 'string',
        'reply_startdate' => '\DateTime',
        'reply_enddate' => '\DateTime',
        'displayed_name' => 'string',
        'spam_enabled' => 'bool',
        'spam_mark_as_read' => 'bool',
        'spam_threshold' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'raw_password' => null,
        'comment' => null,
        'quota_bytes' => null,
        'global_admin' => null,
        'enabled' => null,
        'enable_imap' => null,
        'enable_pop' => null,
        'allow_spoofing' => null,
        'forward_enabled' => null,
        'forward_destination' => null,
        'forward_keep' => null,
        'reply_enabled' => null,
        'reply_subject' => null,
        'reply_body' => null,
        'reply_startdate' => 'date',
        'reply_enddate' => 'date',
        'displayed_name' => null,
        'spam_enabled' => null,
        'spam_mark_as_read' => null,
        'spam_threshold' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'raw_password' => false,
		'comment' => false,
		'quota_bytes' => false,
		'global_admin' => false,
		'enabled' => false,
		'enable_imap' => false,
		'enable_pop' => false,
		'allow_spoofing' => false,
		'forward_enabled' => false,
		'forward_destination' => false,
		'forward_keep' => false,
		'reply_enabled' => false,
		'reply_subject' => false,
		'reply_body' => false,
		'reply_startdate' => false,
		'reply_enddate' => false,
		'displayed_name' => false,
		'spam_enabled' => false,
		'spam_mark_as_read' => false,
		'spam_threshold' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'raw_password' => 'raw_password',
        'comment' => 'comment',
        'quota_bytes' => 'quota_bytes',
        'global_admin' => 'global_admin',
        'enabled' => 'enabled',
        'enable_imap' => 'enable_imap',
        'enable_pop' => 'enable_pop',
        'allow_spoofing' => 'allow_spoofing',
        'forward_enabled' => 'forward_enabled',
        'forward_destination' => 'forward_destination',
        'forward_keep' => 'forward_keep',
        'reply_enabled' => 'reply_enabled',
        'reply_subject' => 'reply_subject',
        'reply_body' => 'reply_body',
        'reply_startdate' => 'reply_startdate',
        'reply_enddate' => 'reply_enddate',
        'displayed_name' => 'displayed_name',
        'spam_enabled' => 'spam_enabled',
        'spam_mark_as_read' => 'spam_mark_as_read',
        'spam_threshold' => 'spam_threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'raw_password' => 'setRawPassword',
        'comment' => 'setComment',
        'quota_bytes' => 'setQuotaBytes',
        'global_admin' => 'setGlobalAdmin',
        'enabled' => 'setEnabled',
        'enable_imap' => 'setEnableImap',
        'enable_pop' => 'setEnablePop',
        'allow_spoofing' => 'setAllowSpoofing',
        'forward_enabled' => 'setForwardEnabled',
        'forward_destination' => 'setForwardDestination',
        'forward_keep' => 'setForwardKeep',
        'reply_enabled' => 'setReplyEnabled',
        'reply_subject' => 'setReplySubject',
        'reply_body' => 'setReplyBody',
        'reply_startdate' => 'setReplyStartdate',
        'reply_enddate' => 'setReplyEnddate',
        'displayed_name' => 'setDisplayedName',
        'spam_enabled' => 'setSpamEnabled',
        'spam_mark_as_read' => 'setSpamMarkAsRead',
        'spam_threshold' => 'setSpamThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'raw_password' => 'getRawPassword',
        'comment' => 'getComment',
        'quota_bytes' => 'getQuotaBytes',
        'global_admin' => 'getGlobalAdmin',
        'enabled' => 'getEnabled',
        'enable_imap' => 'getEnableImap',
        'enable_pop' => 'getEnablePop',
        'allow_spoofing' => 'getAllowSpoofing',
        'forward_enabled' => 'getForwardEnabled',
        'forward_destination' => 'getForwardDestination',
        'forward_keep' => 'getForwardKeep',
        'reply_enabled' => 'getReplyEnabled',
        'reply_subject' => 'getReplySubject',
        'reply_body' => 'getReplyBody',
        'reply_startdate' => 'getReplyStartdate',
        'reply_enddate' => 'getReplyEnddate',
        'displayed_name' => 'getDisplayedName',
        'spam_enabled' => 'getSpamEnabled',
        'spam_mark_as_read' => 'getSpamMarkAsRead',
        'spam_threshold' => 'getSpamThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('raw_password', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('quota_bytes', $data ?? [], null);
        $this->setIfExists('global_admin', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('enable_imap', $data ?? [], null);
        $this->setIfExists('enable_pop', $data ?? [], null);
        $this->setIfExists('allow_spoofing', $data ?? [], null);
        $this->setIfExists('forward_enabled', $data ?? [], null);
        $this->setIfExists('forward_destination', $data ?? [], null);
        $this->setIfExists('forward_keep', $data ?? [], null);
        $this->setIfExists('reply_enabled', $data ?? [], null);
        $this->setIfExists('reply_subject', $data ?? [], null);
        $this->setIfExists('reply_body', $data ?? [], null);
        $this->setIfExists('reply_startdate', $data ?? [], null);
        $this->setIfExists('reply_enddate', $data ?? [], null);
        $this->setIfExists('displayed_name', $data ?? [], null);
        $this->setIfExists('spam_enabled', $data ?? [], null);
        $this->setIfExists('spam_mark_as_read', $data ?? [], null);
        $this->setIfExists('spam_threshold', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets raw_password
     *
     * @return string|null
     */
    public function getRawPassword()
    {
        return $this->container['raw_password'];
    }

    /**
     * Sets raw_password
     *
     * @param string|null $raw_password The raw (plain text) password of the user. Mailu will hash the password using BCRYPT-SHA256
     *
     * @return self
     */
    public function setRawPassword($raw_password)
    {
        if (is_null($raw_password)) {
            throw new \InvalidArgumentException('non-nullable raw_password cannot be null');
        }
        $this->container['raw_password'] = $raw_password;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment A description for the user. This description is shown on the Users page
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets quota_bytes
     *
     * @return int|null
     */
    public function getQuotaBytes()
    {
        return $this->container['quota_bytes'];
    }

    /**
     * Sets quota_bytes
     *
     * @param int|null $quota_bytes The maximum quota for the user’s email box in bytes
     *
     * @return self
     */
    public function setQuotaBytes($quota_bytes)
    {
        if (is_null($quota_bytes)) {
            throw new \InvalidArgumentException('non-nullable quota_bytes cannot be null');
        }
        $this->container['quota_bytes'] = $quota_bytes;

        return $this;
    }

    /**
     * Gets global_admin
     *
     * @return bool|null
     */
    public function getGlobalAdmin()
    {
        return $this->container['global_admin'];
    }

    /**
     * Sets global_admin
     *
     * @param bool|null $global_admin Make the user a global administrator
     *
     * @return self
     */
    public function setGlobalAdmin($global_admin)
    {
        if (is_null($global_admin)) {
            throw new \InvalidArgumentException('non-nullable global_admin cannot be null');
        }
        $this->container['global_admin'] = $global_admin;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Enable the user. When an user is disabled, the user is unable to login to the Admin GUI or webmail or access his email via IMAP/POP3 or send mail
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets enable_imap
     *
     * @return bool|null
     */
    public function getEnableImap()
    {
        return $this->container['enable_imap'];
    }

    /**
     * Sets enable_imap
     *
     * @param bool|null $enable_imap Allow email retrieval via IMAP
     *
     * @return self
     */
    public function setEnableImap($enable_imap)
    {
        if (is_null($enable_imap)) {
            throw new \InvalidArgumentException('non-nullable enable_imap cannot be null');
        }
        $this->container['enable_imap'] = $enable_imap;

        return $this;
    }

    /**
     * Gets enable_pop
     *
     * @return bool|null
     */
    public function getEnablePop()
    {
        return $this->container['enable_pop'];
    }

    /**
     * Sets enable_pop
     *
     * @param bool|null $enable_pop Allow email retrieval via POP3
     *
     * @return self
     */
    public function setEnablePop($enable_pop)
    {
        if (is_null($enable_pop)) {
            throw new \InvalidArgumentException('non-nullable enable_pop cannot be null');
        }
        $this->container['enable_pop'] = $enable_pop;

        return $this;
    }

    /**
     * Gets allow_spoofing
     *
     * @return bool|null
     */
    public function getAllowSpoofing()
    {
        return $this->container['allow_spoofing'];
    }

    /**
     * Sets allow_spoofing
     *
     * @param bool|null $allow_spoofing Allow the user to spoof the sender (send email as anyone)
     *
     * @return self
     */
    public function setAllowSpoofing($allow_spoofing)
    {
        if (is_null($allow_spoofing)) {
            throw new \InvalidArgumentException('non-nullable allow_spoofing cannot be null');
        }
        $this->container['allow_spoofing'] = $allow_spoofing;

        return $this;
    }

    /**
     * Gets forward_enabled
     *
     * @return bool|null
     */
    public function getForwardEnabled()
    {
        return $this->container['forward_enabled'];
    }

    /**
     * Sets forward_enabled
     *
     * @param bool|null $forward_enabled Enable auto forwarding
     *
     * @return self
     */
    public function setForwardEnabled($forward_enabled)
    {
        if (is_null($forward_enabled)) {
            throw new \InvalidArgumentException('non-nullable forward_enabled cannot be null');
        }
        $this->container['forward_enabled'] = $forward_enabled;

        return $this;
    }

    /**
     * Gets forward_destination
     *
     * @return string[]|null
     */
    public function getForwardDestination()
    {
        return $this->container['forward_destination'];
    }

    /**
     * Sets forward_destination
     *
     * @param string[]|null $forward_destination forward_destination
     *
     * @return self
     */
    public function setForwardDestination($forward_destination)
    {
        if (is_null($forward_destination)) {
            throw new \InvalidArgumentException('non-nullable forward_destination cannot be null');
        }
        $this->container['forward_destination'] = $forward_destination;

        return $this;
    }

    /**
     * Gets forward_keep
     *
     * @return bool|null
     */
    public function getForwardKeep()
    {
        return $this->container['forward_keep'];
    }

    /**
     * Sets forward_keep
     *
     * @param bool|null $forward_keep Keep a copy of the forwarded email in the inbox
     *
     * @return self
     */
    public function setForwardKeep($forward_keep)
    {
        if (is_null($forward_keep)) {
            throw new \InvalidArgumentException('non-nullable forward_keep cannot be null');
        }
        $this->container['forward_keep'] = $forward_keep;

        return $this;
    }

    /**
     * Gets reply_enabled
     *
     * @return bool|null
     */
    public function getReplyEnabled()
    {
        return $this->container['reply_enabled'];
    }

    /**
     * Sets reply_enabled
     *
     * @param bool|null $reply_enabled Enable automatic replies. This is also known as out of office (ooo) or out of facility (oof) replies
     *
     * @return self
     */
    public function setReplyEnabled($reply_enabled)
    {
        if (is_null($reply_enabled)) {
            throw new \InvalidArgumentException('non-nullable reply_enabled cannot be null');
        }
        $this->container['reply_enabled'] = $reply_enabled;

        return $this;
    }

    /**
     * Gets reply_subject
     *
     * @return string|null
     */
    public function getReplySubject()
    {
        return $this->container['reply_subject'];
    }

    /**
     * Sets reply_subject
     *
     * @param string|null $reply_subject Optional subject for the automatic reply
     *
     * @return self
     */
    public function setReplySubject($reply_subject)
    {
        if (is_null($reply_subject)) {
            throw new \InvalidArgumentException('non-nullable reply_subject cannot be null');
        }
        $this->container['reply_subject'] = $reply_subject;

        return $this;
    }

    /**
     * Gets reply_body
     *
     * @return string|null
     */
    public function getReplyBody()
    {
        return $this->container['reply_body'];
    }

    /**
     * Sets reply_body
     *
     * @param string|null $reply_body The body of the automatic reply email
     *
     * @return self
     */
    public function setReplyBody($reply_body)
    {
        if (is_null($reply_body)) {
            throw new \InvalidArgumentException('non-nullable reply_body cannot be null');
        }
        $this->container['reply_body'] = $reply_body;

        return $this;
    }

    /**
     * Gets reply_startdate
     *
     * @return \DateTime|null
     */
    public function getReplyStartdate()
    {
        return $this->container['reply_startdate'];
    }

    /**
     * Sets reply_startdate
     *
     * @param \DateTime|null $reply_startdate Start date for automatic replies in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setReplyStartdate($reply_startdate)
    {
        if (is_null($reply_startdate)) {
            throw new \InvalidArgumentException('non-nullable reply_startdate cannot be null');
        }
        $this->container['reply_startdate'] = $reply_startdate;

        return $this;
    }

    /**
     * Gets reply_enddate
     *
     * @return \DateTime|null
     */
    public function getReplyEnddate()
    {
        return $this->container['reply_enddate'];
    }

    /**
     * Sets reply_enddate
     *
     * @param \DateTime|null $reply_enddate End date for automatic replies in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setReplyEnddate($reply_enddate)
    {
        if (is_null($reply_enddate)) {
            throw new \InvalidArgumentException('non-nullable reply_enddate cannot be null');
        }
        $this->container['reply_enddate'] = $reply_enddate;

        return $this;
    }

    /**
     * Gets displayed_name
     *
     * @return string|null
     */
    public function getDisplayedName()
    {
        return $this->container['displayed_name'];
    }

    /**
     * Sets displayed_name
     *
     * @param string|null $displayed_name The display name of the user within the Admin GUI
     *
     * @return self
     */
    public function setDisplayedName($displayed_name)
    {
        if (is_null($displayed_name)) {
            throw new \InvalidArgumentException('non-nullable displayed_name cannot be null');
        }
        $this->container['displayed_name'] = $displayed_name;

        return $this;
    }

    /**
     * Gets spam_enabled
     *
     * @return bool|null
     */
    public function getSpamEnabled()
    {
        return $this->container['spam_enabled'];
    }

    /**
     * Sets spam_enabled
     *
     * @param bool|null $spam_enabled Enable the spam filter
     *
     * @return self
     */
    public function setSpamEnabled($spam_enabled)
    {
        if (is_null($spam_enabled)) {
            throw new \InvalidArgumentException('non-nullable spam_enabled cannot be null');
        }
        $this->container['spam_enabled'] = $spam_enabled;

        return $this;
    }

    /**
     * Gets spam_mark_as_read
     *
     * @return bool|null
     */
    public function getSpamMarkAsRead()
    {
        return $this->container['spam_mark_as_read'];
    }

    /**
     * Sets spam_mark_as_read
     *
     * @param bool|null $spam_mark_as_read Enable marking spam mails as read
     *
     * @return self
     */
    public function setSpamMarkAsRead($spam_mark_as_read)
    {
        if (is_null($spam_mark_as_read)) {
            throw new \InvalidArgumentException('non-nullable spam_mark_as_read cannot be null');
        }
        $this->container['spam_mark_as_read'] = $spam_mark_as_read;

        return $this;
    }

    /**
     * Gets spam_threshold
     *
     * @return int|null
     */
    public function getSpamThreshold()
    {
        return $this->container['spam_threshold'];
    }

    /**
     * Sets spam_threshold
     *
     * @param int|null $spam_threshold The user defined spam filter tolerance
     *
     * @return self
     */
    public function setSpamThreshold($spam_threshold)
    {
        if (is_null($spam_threshold)) {
            throw new \InvalidArgumentException('non-nullable spam_threshold cannot be null');
        }
        $this->container['spam_threshold'] = $spam_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


